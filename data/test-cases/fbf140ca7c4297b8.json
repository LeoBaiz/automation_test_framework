{"uid":"fbf140ca7c4297b8","name":"Login Test - Missing Username","fullName":"tests.test_login#test_missing_username","historyId":"6d5958bb02743ef082de81a670a2da2a","time":{"start":1745876419258,"stop":1745876419380,"duration":122},"description":"Este test verifica que un usuario sin nombre de usuario no pueda iniciar sesión.","descriptionHtml":"<p>Este test verifica que un usuario sin nombre de usuario no pueda iniciar sesión.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x5631e8b8375a <unknown>\n#1 0x5631e86364b0 <unknown>\n#2 0x5631e862d593 <unknown>\n#3 0x5631e861dc69 <unknown>\n#4 0x5631e861f96d <unknown>\n#5 0x5631e861dffe <unknown>\n#6 0x5631e861d99e <unknown>\n#7 0x5631e861d64f <unknown>\n#8 0x5631e861b4cf <unknown>\n#9 0x5631e861bc8a <unknown>\n#10 0x5631e8639949 <unknown>\n#11 0x5631e86d41f5 <unknown>\n#12 0x5631e86ad592 <unknown>\n#13 0x5631e86d35e0 <unknown>\n#14 0x5631e86ad363 <unknown>\n#15 0x5631e8679d63 <unknown>\n#16 0x5631e867a9c1 <unknown>\n#17 0x5631e8b48a6b <unknown>\n#18 0x5631e8b4c951 <unknown>\n#19 0x5631e8b30b62 <unknown>\n#20 0x5631e8b4d4c4 <unknown>\n#21 0x5631e8b1513f <unknown>\n#22 0x5631e8b716f8 <unknown>\n#23 0x5631e8b718d6 <unknown>\n#24 0x5631e8b825a6 <unknown>\n#25 0x7f53ace9caa4 <unknown>\n#26 0x7f53acf29c3c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f399b9ec41f0fa4b6bdea5b1c7321f73\")>\n\n    @allure.title(\"Login Test - Missing Username\")\n    @allure.description(\"Este test verifica que un usuario sin nombre de usuario no pueda iniciar sesión.\")\n    def test_missing_username(driver):\n        login_page = LoginPage(driver)\n>       login_page.load()  # Llama al método 'load' para abrir la página de login\n\ntests/test_login.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:12: in load\n    self.driver.get(self.URL)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f82cc131260>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\\\n#24 0x5631e8b825a6 \\\\u003Cunknown>\\\\n#25 0x7f53ace9caa4 \\\\u003Cunknown>\\\\n#26 0x7f53acf29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x5631e8b8375a <unknown>\nE       #1 0x5631e86364b0 <unknown>\nE       #2 0x5631e862d593 <unknown>\nE       #3 0x5631e861dc69 <unknown>\nE       #4 0x5631e861f96d <unknown>\nE       #5 0x5631e861dffe <unknown>\nE       #6 0x5631e861d99e <unknown>\nE       #7 0x5631e861d64f <unknown>\nE       #8 0x5631e861b4cf <unknown>\nE       #9 0x5631e861bc8a <unknown>\nE       #10 0x5631e8639949 <unknown>\nE       #11 0x5631e86d41f5 <unknown>\nE       #12 0x5631e86ad592 <unknown>\nE       #13 0x5631e86d35e0 <unknown>\nE       #14 0x5631e86ad363 <unknown>\nE       #15 0x5631e8679d63 <unknown>\nE       #16 0x5631e867a9c1 <unknown>\nE       #17 0x5631e8b48a6b <unknown>\nE       #18 0x5631e8b4c951 <unknown>\nE       #19 0x5631e8b30b62 <unknown>\nE       #20 0x5631e8b4d4c4 <unknown>\nE       #21 0x5631e8b1513f <unknown>\nE       #22 0x5631e8b716f8 <unknown>\nE       #23 0x5631e8b718d6 <unknown>\nE       #24 0x5631e8b825a6 <unknown>\nE       #25 0x7f53ace9caa4 <unknown>\nE       #26 0x7f53acf29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1745876418931,"stop":1745876419257,"duration":326},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Este test verifica que un usuario sin nombre de usuario no pueda iniciar sesión.","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x5631e8b8375a <unknown>\n#1 0x5631e86364b0 <unknown>\n#2 0x5631e862d593 <unknown>\n#3 0x5631e861dc69 <unknown>\n#4 0x5631e861f96d <unknown>\n#5 0x5631e861dffe <unknown>\n#6 0x5631e861d99e <unknown>\n#7 0x5631e861d64f <unknown>\n#8 0x5631e861b4cf <unknown>\n#9 0x5631e861bc8a <unknown>\n#10 0x5631e8639949 <unknown>\n#11 0x5631e86d41f5 <unknown>\n#12 0x5631e86ad592 <unknown>\n#13 0x5631e86d35e0 <unknown>\n#14 0x5631e86ad363 <unknown>\n#15 0x5631e8679d63 <unknown>\n#16 0x5631e867a9c1 <unknown>\n#17 0x5631e8b48a6b <unknown>\n#18 0x5631e8b4c951 <unknown>\n#19 0x5631e8b30b62 <unknown>\n#20 0x5631e8b4d4c4 <unknown>\n#21 0x5631e8b1513f <unknown>\n#22 0x5631e8b716f8 <unknown>\n#23 0x5631e8b718d6 <unknown>\n#24 0x5631e8b825a6 <unknown>\n#25 0x7f53ace9caa4 <unknown>\n#26 0x7f53acf29c3c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f399b9ec41f0fa4b6bdea5b1c7321f73\")>\n\n    @allure.title(\"Login Test - Missing Username\")\n    @allure.description(\"Este test verifica que un usuario sin nombre de usuario no pueda iniciar sesión.\")\n    def test_missing_username(driver):\n        login_page = LoginPage(driver)\n>       login_page.load()  # Llama al método 'load' para abrir la página de login\n\ntests/test_login.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:12: in load\n    self.driver.get(self.URL)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f82cc131260>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\\\n#24 0x5631e8b825a6 \\\\u003Cunknown>\\\\n#25 0x7f53ace9caa4 \\\\u003Cunknown>\\\\n#26 0x7f53acf29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x5631e8b8375a <unknown>\nE       #1 0x5631e86364b0 <unknown>\nE       #2 0x5631e862d593 <unknown>\nE       #3 0x5631e861dc69 <unknown>\nE       #4 0x5631e861f96d <unknown>\nE       #5 0x5631e861dffe <unknown>\nE       #6 0x5631e861d99e <unknown>\nE       #7 0x5631e861d64f <unknown>\nE       #8 0x5631e861b4cf <unknown>\nE       #9 0x5631e861bc8a <unknown>\nE       #10 0x5631e8639949 <unknown>\nE       #11 0x5631e86d41f5 <unknown>\nE       #12 0x5631e86ad592 <unknown>\nE       #13 0x5631e86d35e0 <unknown>\nE       #14 0x5631e86ad363 <unknown>\nE       #15 0x5631e8679d63 <unknown>\nE       #16 0x5631e867a9c1 <unknown>\nE       #17 0x5631e8b48a6b <unknown>\nE       #18 0x5631e8b4c951 <unknown>\nE       #19 0x5631e8b30b62 <unknown>\nE       #20 0x5631e8b4d4c4 <unknown>\nE       #21 0x5631e8b1513f <unknown>\nE       #22 0x5631e8b716f8 <unknown>\nE       #23 0x5631e8b718d6 <unknown>\nE       #24 0x5631e8b825a6 <unknown>\nE       #25 0x7f53ace9caa4 <unknown>\nE       #26 0x7f53acf29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","steps":[],"attachments":[{"uid":"e452c27dec55588c","name":"screenshot_test_missing_username.png","source":"e452c27dec55588c.png","type":"image/png","size":22571}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1745876419537,"stop":1745876419596,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"fv-az797-386"},{"name":"thread","value":"3799-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fbf140ca7c4297b8.json","parameterValues":[]}