{"uid":"697a785fae47d9fb","name":"Verificar que ambos checkboxes pueden ser marcados","fullName":"tests.test_checkboxes.TestCheckboxes#test_both_checkboxes_can_be_checked","historyId":"b523e78d42980a234734274dc1d7ebcc","time":{"start":1745876416576,"stop":1745876416705,"duration":129},"description":"Este test verifica que ambos checkboxes (0 y 1) pueden ser marcados correctamente.","descriptionHtml":"<p>Este test verifica que ambos checkboxes (0 y 1) pueden ser marcados correctamente.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x55c37c37a75a <unknown>\n#1 0x55c37be2d4b0 <unknown>\n#2 0x55c37be24593 <unknown>\n#3 0x55c37be14c69 <unknown>\n#4 0x55c37be1696d <unknown>\n#5 0x55c37be14ffe <unknown>\n#6 0x55c37be1499e <unknown>\n#7 0x55c37be1464f <unknown>\n#8 0x55c37be124cf <unknown>\n#9 0x55c37be12c8a <unknown>\n#10 0x55c37be30949 <unknown>\n#11 0x55c37becb1f5 <unknown>\n#12 0x55c37bea4592 <unknown>\n#13 0x55c37beca5e0 <unknown>\n#14 0x55c37bea4363 <unknown>\n#15 0x55c37be70d63 <unknown>\n#16 0x55c37be719c1 <unknown>\n#17 0x55c37c33fa6b <unknown>\n#18 0x55c37c343951 <unknown>\n#19 0x55c37c327b62 <unknown>\n#20 0x55c37c3444c4 <unknown>\n#21 0x55c37c30c13f <unknown>\n#22 0x55c37c3686f8 <unknown>\n#23 0x55c37c3688d6 <unknown>\n#24 0x55c37c3795a6 <unknown>\n#25 0x7f020689caa4 <unknown>\n#26 0x7f0206929c3c <unknown>","statusTrace":"self = <tests.test_checkboxes.TestCheckboxes object at 0x7f82cc3003e0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d10fb85b5cf5ac095f801dc127b6aa79\")>\n\n    @allure.title(\"Verificar que ambos checkboxes pueden ser marcados\")\n    @allure.description(\"Este test verifica que ambos checkboxes (0 y 1) pueden ser marcados correctamente.\")\n    def test_both_checkboxes_can_be_checked(self, driver):\n        page = CheckboxesPage(driver)\n>       page.open()\n\ntests/test_checkboxes.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/checkboxes_page.py:14: in open\n    self.driver.get(self.URL)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f82cc2cead0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\\\n#24 0x55c37c3795a6 \\\\u003Cunknown>\\\\n#25 0x7f020689caa4 \\\\u003Cunknown>\\\\n#26 0x7f0206929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x55c37c37a75a <unknown>\nE       #1 0x55c37be2d4b0 <unknown>\nE       #2 0x55c37be24593 <unknown>\nE       #3 0x55c37be14c69 <unknown>\nE       #4 0x55c37be1696d <unknown>\nE       #5 0x55c37be14ffe <unknown>\nE       #6 0x55c37be1499e <unknown>\nE       #7 0x55c37be1464f <unknown>\nE       #8 0x55c37be124cf <unknown>\nE       #9 0x55c37be12c8a <unknown>\nE       #10 0x55c37be30949 <unknown>\nE       #11 0x55c37becb1f5 <unknown>\nE       #12 0x55c37bea4592 <unknown>\nE       #13 0x55c37beca5e0 <unknown>\nE       #14 0x55c37bea4363 <unknown>\nE       #15 0x55c37be70d63 <unknown>\nE       #16 0x55c37be719c1 <unknown>\nE       #17 0x55c37c33fa6b <unknown>\nE       #18 0x55c37c343951 <unknown>\nE       #19 0x55c37c327b62 <unknown>\nE       #20 0x55c37c3444c4 <unknown>\nE       #21 0x55c37c30c13f <unknown>\nE       #22 0x55c37c3686f8 <unknown>\nE       #23 0x55c37c3688d6 <unknown>\nE       #24 0x55c37c3795a6 <unknown>\nE       #25 0x7f020689caa4 <unknown>\nE       #26 0x7f0206929c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1745876416258,"stop":1745876416576,"duration":318},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Este test verifica que ambos checkboxes (0 y 1) pueden ser marcados correctamente.","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=135.0.7049.114)\nStacktrace:\n#0 0x55c37c37a75a <unknown>\n#1 0x55c37be2d4b0 <unknown>\n#2 0x55c37be24593 <unknown>\n#3 0x55c37be14c69 <unknown>\n#4 0x55c37be1696d <unknown>\n#5 0x55c37be14ffe <unknown>\n#6 0x55c37be1499e <unknown>\n#7 0x55c37be1464f <unknown>\n#8 0x55c37be124cf <unknown>\n#9 0x55c37be12c8a <unknown>\n#10 0x55c37be30949 <unknown>\n#11 0x55c37becb1f5 <unknown>\n#12 0x55c37bea4592 <unknown>\n#13 0x55c37beca5e0 <unknown>\n#14 0x55c37bea4363 <unknown>\n#15 0x55c37be70d63 <unknown>\n#16 0x55c37be719c1 <unknown>\n#17 0x55c37c33fa6b <unknown>\n#18 0x55c37c343951 <unknown>\n#19 0x55c37c327b62 <unknown>\n#20 0x55c37c3444c4 <unknown>\n#21 0x55c37c30c13f <unknown>\n#22 0x55c37c3686f8 <unknown>\n#23 0x55c37c3688d6 <unknown>\n#24 0x55c37c3795a6 <unknown>\n#25 0x7f020689caa4 <unknown>\n#26 0x7f0206929c3c <unknown>","statusTrace":"self = <tests.test_checkboxes.TestCheckboxes object at 0x7f82cc3003e0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d10fb85b5cf5ac095f801dc127b6aa79\")>\n\n    @allure.title(\"Verificar que ambos checkboxes pueden ser marcados\")\n    @allure.description(\"Este test verifica que ambos checkboxes (0 y 1) pueden ser marcados correctamente.\")\n    def test_both_checkboxes_can_be_checked(self, driver):\n        page = CheckboxesPage(driver)\n>       page.open()\n\ntests/test_checkboxes.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/checkboxes_page.py:14: in open\n    self.driver.get(self.URL)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f82cc2cead0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\\\n#24 0x55c37c3795a6 \\\\u003Cunknown>\\\\n#25 0x7f020689caa4 \\\\u003Cunknown>\\\\n#26 0x7f0206929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=135.0.7049.114)\nE       Stacktrace:\nE       #0 0x55c37c37a75a <unknown>\nE       #1 0x55c37be2d4b0 <unknown>\nE       #2 0x55c37be24593 <unknown>\nE       #3 0x55c37be14c69 <unknown>\nE       #4 0x55c37be1696d <unknown>\nE       #5 0x55c37be14ffe <unknown>\nE       #6 0x55c37be1499e <unknown>\nE       #7 0x55c37be1464f <unknown>\nE       #8 0x55c37be124cf <unknown>\nE       #9 0x55c37be12c8a <unknown>\nE       #10 0x55c37be30949 <unknown>\nE       #11 0x55c37becb1f5 <unknown>\nE       #12 0x55c37bea4592 <unknown>\nE       #13 0x55c37beca5e0 <unknown>\nE       #14 0x55c37bea4363 <unknown>\nE       #15 0x55c37be70d63 <unknown>\nE       #16 0x55c37be719c1 <unknown>\nE       #17 0x55c37c33fa6b <unknown>\nE       #18 0x55c37c343951 <unknown>\nE       #19 0x55c37c327b62 <unknown>\nE       #20 0x55c37c3444c4 <unknown>\nE       #21 0x55c37c30c13f <unknown>\nE       #22 0x55c37c3686f8 <unknown>\nE       #23 0x55c37c3688d6 <unknown>\nE       #24 0x55c37c3795a6 <unknown>\nE       #25 0x7f020689caa4 <unknown>\nE       #26 0x7f0206929c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","steps":[],"attachments":[{"uid":"dc6b002776ecdb8d","name":"screenshot_test_both_checkboxes_can_be_checked.png","source":"dc6b002776ecdb8d.png","type":"image/png","size":22571}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1745876416850,"stop":1745876416908,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checkboxes"},{"name":"subSuite","value":"TestCheckboxes"},{"name":"host","value":"fv-az797-386"},{"name":"thread","value":"3799-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checkboxes"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('driver')"]},"source":"697a785fae47d9fb.json","parameterValues":[]}