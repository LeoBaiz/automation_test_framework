name: QA Automation Tests

on:
  workflow_dispatch:  # Ejecuci√≥n manual
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Chequear el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar Python
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # 3Ô∏è‚É£ Instalar dependencias de Python
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4Ô∏è‚É£ Instalar dependencias del sistema y Google Chrome
      - name: Install system dependencies and Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip fonts-liberation libappindicator3-1 libasound2t64 libatk-bridge2.0-0 libatk1.0-0 libcups2 libdbus-1-3 libgdk-pixbuf2.0-0 libnspr4 libnss3 libxcomposite1 libxdamage1 libxrandr2 xdg-utils
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || echo "dpkg failed, resolving with apt-get install -f"
          sudo apt-get install -f -y
          rm google-chrome-stable_current_amd64.deb
          if ! command -v google-chrome; then
            echo "Error: google-chrome not found"
            exit 1
          fi
          google-chrome --version

        # 5Ô∏è‚É£ Instalar ChromeDriver compatible
      - name: Install ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d. -f1-3)
          if [ -z "$CHROME_VERSION" ]; then
            echo "Error: No se pudo obtener la versi√≥n de Chrome"
            exit 1
          fi
          echo "Chrome version: $CHROME_VERSION"
          
          #Obtener la versi√≥n de ChromeDriver compatible desde chrome-for-testing
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$CHROME_VERSION")
          if [ -z "$CHROMEDRIVER_VERSION" ]; then
            echo "Error: No se pudo obtener la versi√≥n de ChromeDriver para Chrome $CHROME_VERSION"
            exit 1
          fi
          echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
          
          # Descargar ChromeDriver desde el nuevo repositorio
          wget -q "https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version
          rm -rf chromedriver-linux64.zip chromedriver-linux64

      # 6Ô∏è‚É£ Configurar entorno para pruebas headless
      - name: Start Xvfb for headless testing
        run: |
          sudo apt-get install -y xvfb
          Xvfb :99 -ac -screen 0 1280x1024x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      # 7Ô∏è‚É£ Ejecutar pruebas con pytest y generar reportes Allure
      - name: Run tests with pytest
        run: |
          pytest -v --alluredir=allure-results
          ls -la allure-results
        env:
          SELENIUM_HEADLESS: 'true'

      # 8Ô∏è‚É£ Configurar Java para Allure
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
        if: always()

      # 9Ô∏è‚É£ Instalar Allure CLI
      - name: Install Allure CLI
        run: |
          wget -q https://github.com/allure-framework/allure2/releases/download/2.30.0/allure-2.30.0.tgz
          tar -zxvf allure-2.30.0.tgz
          sudo mv allure-2.30.0 /usr/local/allure
          export PATH=$PATH:/usr/local/allure/bin
          echo "PATH=$PATH:/usr/local/allure/bin" >> $GITHUB_ENV
          allure --version
        if: always()

      # üîü Generar reporte Allure en HTML
      - name: Generate Allure Report
        run: |
          /usr/local/allure/bin/allure generate allure-results --clean -o allure-report
          ls -la allure-report
        if: always()

      # Nuevo paso: Verificar el directorio allure-report
      - name: Check Allure Report Directory
        run: |
          if [ -d "allure-report" ]; then
            echo "allure-report exists and contains:"
            ls -la allure-report
          else
            echo "Error: allure-report directory does not exist"
            exit 1
          fi
        if: always()

      # Subir allure-report como artefacto (opcional)
      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
        if: always()

      # 1Ô∏è‚É£1Ô∏è‚É£ Subir el reporte a GitHub Pages
      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          keep_files: false
          publish_branch: gh-pages
        env:
          DEBUG: true
        if: always()